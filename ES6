                                              ES6/7/8
	ECMAScript是JavaScript语言的标准，JavaScript是ECMAScript的一种实现。以下是ECMAScript6/7/8的相关内容。
	
1、let和const
	ES6新增了let和const用来声明变量，它们解决了之前使用var声明的一些弊端。
1.1、块级作用域
	如果使用var来声明变量，则作用域在函数内或者闭包；如果使用let、const，除了在函数内/闭包外，还拥有块级作用域（一个大括号{}内）。例如:
	{let name = "lemon"};
1.2、const声明常量
	const用于声明常量，声明过后不可重复赋值，引用类型除外。例如：
	const PI = 3.14；
	PI = 20; // Invalid or unexpected token
	const obj = { 'name': 'lemon' };
	obj.name = 'mt'; // obj = { 'name': 'mt' };
1.3、let/const不存在变量提升，不可重复声明
	console.log(name);
	let name = 'lemon'; // name is not defined(不存在变量提升)
	let age = 20;
	let age = 18; // Identifier 'age' has already been declared(不可重复声明变量)
	
2、解构赋值
	用于分解js中对象的结构，自动解析数组或对象中的值。
2.1、数组解构
	let [ name1, name2, name3, name4 ] = [ 'lemon1', 'lemon2', , 'lemon4' ];
	console.log(name1, name2, name3, name4); // lemon1 lemon2 undefined lemon4
2.3、对象解构
  let { name, age, sex } = {
    name: 'lemon',
    age: 20,
    sex: '男' 
  };
  console.log(name, age, sex); // 'lemon' 20 '男'
  
  解构重命名：
  let { name: myName, age: myAge, sex: mySex } = {
    name: 'lemon',
    age: 20,
    sex: '男' 
  };
  console.log(myName, myAge, mySex); // 'lemon' 20 '男'

3、延展操作符
3.1、延展数组
  let arr1 = [ 1, 2, 3 ];
  let arr2 = [ 'a', 'b', 'c' ];
  let arr3 = [ ..arr1, ...arr2 ];
  console.log(arr3); // [ 1, 2, 3, 'a', 'b', 'c' ]
3.2、延展对象
  let obj1 = { 'name': 'lemon', 'age': 20 };
  let obj2 = { 'name': 'mt', 'age': 18, 'sex': 'nv' };
  let obj3 = { ...obj1, ...obj2 };
  console.log(obj3); // {name: "mt", age: 18, sex: "nv"} (属性一致时会被覆盖)
  
4、模板字符串
  模板字符串使用反引号（`）来包含字符串，变量使用${}包含，里面可使用表达式。
  let name = 'lemon';
  let sentence = `my name is ${name ? name : 'mt'}`;
  console.log(sentence); // my name is lemon

5、箭头函数
  箭头函数可以看做是匿名函数的简写方式，形式如: ( inputs ) => { output }
  “=>”左边为参数，当只有一个参数时可以省略小括号();
  “=>”右边为函数体，当只有一句返回值的时候可以省略大括号{}。
  let fn = (name) => {
    return `my name is ${name}`;
  }
  let sentence = fn('lemon');
  console.log(sentence); // 'my name is lemon'
5.1、箭头函数没有this
  let obj = {
    fn: function() {
      setTimeout(function() {
        console.log(this); // 指向window
      }, 1000);
      
      setTimeout(() => {
        console.log(this); // 指向obj
      }, 1000);
    }
  }
箭头函数没有this，内部的this即是外部的this。
5.2、箭头函数中没有arguments对象
